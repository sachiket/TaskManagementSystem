name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Execute Gradle build
      - name: Execute Gradle build
        run: |
          chmod +x ./gradlew
          ./gradlew build

  test:
    runs-on: ubuntu-latest
    needs: build  # This ensures the test job runs after the build job

    steps:
      # Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Execute Gradle build and run tests
      - name: Execute Gradle tests
        run: |
          chmod +x ./gradlew
          ./gradlew test

  docker-build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    needs: [build, test]

    steps:
      # Step 1: Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Gradle permission
      - name: Execute Gradle build
        run: |
          chmod +x ./gradlew

      # Step 2: Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-management-app:latest .

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/task-management-app:latest
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    needs: docker-build-and-push
    steps:
      # Step 1: Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Set up Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Gradle permission
      - name: Execute Gradle build
        run: |
          chmod +x ./gradlew

      # Generate deployment package
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      # Log in to Docker Hub
      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image for deployment
      - run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-management-app:latest .

      # Deploy to Elastic Beanstalk
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET }}
          application_name: TaskManagementService
          environment_name: TaskManagementService-env
          existing_bucket_name: elasticbeanstalk-ap-south-1-216989125905
          region: ap-south-1
          version_label: ${{ github.sha }}
          deployment_package: deploy.zip